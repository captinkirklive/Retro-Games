
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hover Board Traffic Surfer</title>
    <style>
        body { margin: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background: black; }
        #gameCanvas { border: 2px solid #333; cursor: none; }
        #gameOverlay { position: absolute; display: none; flex-direction: column; align-items: center; justify-content: center; }
        #playAgainBtn { padding: 10px 20px; font-size: 18px; cursor: pointer; margin-top: 20px; }
    </style>
</head>
<body>
    <div style="position: relative;">
        <canvas id="gameCanvas" width="600" height="800"></canvas>
        <div id="gameOverlay">
            <h1 id="gameOverText" style="color: #ff0000; font-size: 40px; text-shadow: 0 0 10px #ff0000;">Game Over</h1>
            <button id="playAgainBtn">Play Again</button>
        </div>
    </div>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const gameOverlay = document.getElementById('gameOverlay');
        const playAgainBtn = document.getElementById('playAgainBtn');

        let player, road, vehicles, otherBoarders, playerCans, enemyCans, explosions, score, gameOver, level, lastShotTime;
        let keys = { ArrowLeft: false, ArrowRight: false, ' ': false };
        let mouseX = canvas.width / 2;

        function initGame() {
            player = { x: canvas.width / 2, y: canvas.height - 50, width: 30, height: 60, trail: [], lastThrowDirection: 'left' };
            road = { lanes: [150, 300, 450], speed: 5 };
            vehicles = [];
            otherBoarders = [];
            playerCans = [];
            enemyCans = [];
            explosions = [];
            score = 0;
            gameOver = false;
            level = 1;
            lastShotTime = 0;
        }

        document.addEventListener('keydown', (e) => { if (e.key in keys) keys[e.key] = true; });
        document.addEventListener('keyup', (e) => { if (e.key in keys) keys[e.key] = false; });
        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            mouseX = e.clientX - rect.left;
        });
        playAgainBtn.addEventListener('click', resetGame);

        function resetGame() {
            initGame();
            gameOverlay.style.display = 'none';
            requestAnimationFrame(gameLoop);
        }

        function drawGlowingLine(x1, y1, x2, y2, color, width = 2) {
            ctx.shadowBlur = 10;
            ctx.shadowColor = color;
            ctx.strokeStyle = color;
            ctx.lineWidth = width;
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();
            ctx.shadowBlur = 0;
        }

        function drawHoverBoard(x, y, width, height, color) {
            ctx.beginPath();
            ctx.ellipse(x + width / 2, y + height / 2, width / 2, height / 2, 0, 0, 2 * Math.PI);
            ctx.strokeStyle = color;
            ctx.lineWidth = 2;
            ctx.shadowBlur = 10;
            ctx.shadowColor = color;
            ctx.stroke();
            ctx.shadowBlur = 0;
            drawGlowingLine(x, y + height / 2, x + width, y + height / 2, color);
            drawGlowingLine(x + width / 4, y, x + width / 4, y + height, color);
            drawGlowingLine(x + 3 * width / 4, y, x + 3 * width / 4, y + height, color);
        }

        function drawRoad() {
            road.lanes.forEach(laneX => {
                drawGlowingLine(laneX, 0, laneX, canvas.height, '#888888');
            });
        }

        function movePlayer() {
            if (gameOver) return;
            player.x += (mouseX - player.x) * 0.1;
            if (keys.ArrowLeft) player.x -= 7;
            if (keys.ArrowRight) player.x += 7;
            player.x = Math.max(0, Math.min(canvas.width - player.width, player.x));
            player.trail.unshift({x: player.x, y: player.y});
            if (player.trail.length > 5) player.trail.pop();
            if (keys[' '] && Date.now() - lastShotTime > 200) {
                throwPopCan(player, playerCans, player.lastThrowDirection);
                player.lastThrowDirection = player.lastThrowDirection === 'left' ? 'right' : 'left';
                lastShotTime = Date.now();
            }
        }

        function moveVehicles() {
            vehicles.forEach(vehicle => { vehicle.y += road.speed - vehicle.speed; });
            vehicles = vehicles.filter(vehicle => vehicle.y + vehicle.height > 0);
            if (Math.random() < 0.05) {
                const lane = road.lanes[Math.floor(Math.random() * road.lanes.length)];
                const speed = Math.random() * 3 + 1;
                const color = speed > 3 ? '#ff0000' : (speed > 2 ? '#ffff00' : '#00ffff');
                vehicles.push({ x: lane - 40, y: -120, width: 80, height: 120, speed: speed, color: color });
            }
        }

        function moveOtherBoarders() {
            otherBoarders.forEach(boarder => {
                boarder.y += road.speed - boarder.speed;
                boarder.x += Math.sin(boarder.y * 0.05) * 2;
                if (Math.random() < 0.01) {
                    throwPopCan(boarder, enemyCans, boarder.lastThrowDirection);
                    boarder.lastThrowDirection = boarder.lastThrowDirection === 'left' ? 'right' : 'left';
                }
            });
            otherBoarders = otherBoarders.filter(boarder => boarder.y < canvas.height);
            if (Math.random() < 0.02 && otherBoarders.length < 5) {
                const lane = road.lanes[Math.floor(Math.random() * road.lanes.length)];
                otherBoarders.push({ x: lane - 15, y: -60, width: 30, height: 60, speed: Math.random() * 2 + 3, color: '#ff00ff', lastThrowDirection: 'left' });
            }
        }

        function throwPopCan(thrower, canArray, direction) {
            const speedX = direction === 'left' ? -5 : 5;
            canArray.push({ x: thrower.x + thrower.width / 2, y: thrower.y, speedX: speedX, speedY: -10, color: thrower === player ? '#00ffff' : '#ff00ff' });
        }

        function movePopCans() {
            playerCans.forEach(can => { can.y += can.speedY; can.x += can.speedX; });
            playerCans = playerCans.filter(can => can.y > 0 && can.y < canvas.height && can.x > 0 && can.x < canvas.width);
            enemyCans.forEach(can => { can.y += can.speedY; can.x += can.speedX; });
            enemyCans = enemyCans.filter(can => can.y > 0 && can.y < canvas.height && can.x > 0 && can.x < canvas.width);
        }

        function createExplosion(x, y, color) {
            for (let i = 0; i < 20; i++) {
                explosions.push({
                    x: x, y: y, radius: Math.random() * 3 + 1,
                    speedX: (Math.random() - 0.5) * 8, speedY: (Math.random() - 0.5) * 8,
                    color: color, life: 30
                });
            }
        }

        function checkCollisions() {
            const checkCollision = (obj1, obj2) => {
                return obj1.x < obj2.x + obj2.width && obj1.x + obj1.width > obj2.x &&
                       obj1.y < obj2.y + obj2.height && obj1.y + obj1.height > obj2.y;
            };

            if (vehicles.some(vehicle => checkCollision(player, vehicle))) {
                gameOver = true;
                createExplosion(player.x + player.width / 2, player.y + player.height / 2, '#00ff00');
            }

            otherBoarders.forEach((boarder, boarderIndex) => {
                vehicles.forEach((vehicle, vehicleIndex) => {
                    if (checkCollision(boarder, vehicle)) {
                        createExplosion(boarder.x + boarder.width / 2, boarder.y + boarder.height / 2, '#ff00ff');
                        otherBoarders.splice(boarderIndex, 1);
                        vehicles.splice(vehicleIndex, 1);
                    }
                });
            });

            playerCans.forEach((can, canIndex) => {
                vehicles.forEach((vehicle, vehicleIndex) => {
                    if (can.x > vehicle.x && can.x < vehicle.x + vehicle.width &&
                        can.y > vehicle.y && can.y < vehicle.y + vehicle.height) {
                        createExplosion(vehicle.x + vehicle.width / 2, vehicle.y + vehicle.height / 2, vehicle.color);
                        vehicles.splice(vehicleIndex, 1);
                        playerCans.splice(canIndex, 1);
                        score += 50;
                    }
                });
                otherBoarders.forEach((boarder, boarderIndex) => {
                    if (can.x > boarder.x && can.x < boarder.x + boarder.width &&
                        can.y > boarder.y && can.y < boarder.y + boarder.height) {
                        createExplosion(boarder.x + boarder.width / 2, boarder.y + boarder.height / 2, boarder.color);
                        otherBoarders.splice(boarderIndex, 1);
                        playerCans.splice(canIndex, 1);
                        score += 100;
                    }
                });
            });
        }

        function drawScore() {
            ctx.fillStyle = '#00ff00';
            ctx.font = '20px Arial';
            ctx.shadowBlur = 5;
            ctx.shadowColor = '#00ff00';
            ctx.fillText(`Score: ${score}`, 10, 30);
            ctx.fillText(`Level: ${level}`, 10, 60);
            ctx.shadowBlur = 0;
        }

        function updateLevel() {
            if (score > level * 1000) {
                level++;
                road.speed += 0.5;
            }
        }

        function gameLoop() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            drawRoad();
            vehicles.forEach(v => drawHoverBoard(v.x, v.y, v.width, v.height, v.color));
            otherBoarders.forEach(b => drawHoverBoard(b.x, b.y, b.width, b.height, b.color));
            playerCans.concat(enemyCans).forEach(can => {
                ctx.beginPath();
                ctx.arc(can.x, can.y, 3, 0, Math.PI * 2);
                ctx.fillStyle = can.color;
                ctx.fill();
            });
            explosions.forEach((exp, index) => {
                exp.x += exp.speedX;
                exp.y += exp.speedY;
                exp.life--;
                ctx.beginPath();
                ctx.arc(exp.x, exp.y, exp.radius, 0, Math.PI * 2);
                ctx.fillStyle = exp.color;
                ctx.fill();
                if (exp.life <= 0) explosions.splice(index, 1);
            });

            if (!gameOver) {
                movePlayer();
                moveVehicles();
                moveOtherBoarders();
                movePopCans();
                checkCollisions();
                updateLevel();
                player.trail.forEach((pos, i) => {
                    const alpha = 1 - i / player.trail.length;
                    drawHoverBoard(pos.x, pos.y, player.width, player.height, `rgba(0, 255, 0, ${alpha})`);
                });
                drawHoverBoard(player.x, player.y, player.width, player.height, '#00ff00');
                score++;
            }

            drawScore();

            if (gameOver) {
                gameOverlay.style.display = 'flex';
            } else {
                requestAnimationFrame(gameLoop);
            }
        }

        initGame();
        gameLoop();
    </script>
</body>
</html>
